Args: ../llvm-build/bin/llc -march=frisc string.ll -debug 
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %12
	discovered a new reachable node %13
	discovered a new reachable node %2
	discovered a new reachable node %5
	discovered a new reachable node %10
	discovered a new reachable node %16
	discovered a new reachable node %3
	discovered a new reachable node %8
	discovered a new reachable node %12
	discovered a new reachable node %17
	discovered a new reachable node %19
	discovered a new reachable node %23
	discovered a new reachable node %30
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %12
	discovered a new reachable node %13
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %12
	discovered a new reachable node %13
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %12
	discovered a new reachable node %13
---- Branch Probability Info : strlen ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 0 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge  -> 1 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for 

block-frequency: strlen
=======================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
 - 3: 
loop-detection
 - loop = 
 - loop = : member = 
compute-mass-in-loop: *
 - node: 
  => [ local  ] weight = 2080374784, succ = 
  => [  exit  ] weight = 67108864, succ = 
  => mass:  ffffffffffffffff
  => assign 07ffffffffffffff (f800000000000000) [exit] to 
  => assign f800000000000000 (0000000000000000) to 
 - node: 
  => [backedge] weight = 2147483648
  => mass:  f800000000000000
  => assign f800000000000000 (0000000000000000) [back] to 
compute-loop-scale: *
 - exit-mass = 07ffffffffffffff (ffffffffffffffff - f800000000000000)
 - scale = 32.0
packaging-loop: *
 - node: 
 - node: 
compute-mass-in-function
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to 
 - node: 
  => [ local  ] weight = 576460752303423487, succ = 
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
unwrap-loop-package: *: mass = ffffffffffffffff, scale = 32.0
  => combined-scale = 32.0
 - : 1.0 => 32.0
 - : 0.96875 => 31.0
float-to-int: min = 1.0, max = 32.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
 - : float = 32.0, scaled = 256.0, int = 256
 - : float = 1.0, scaled = 8.0, int = 8
 - : float = 31.0, scaled = 248.0, int = 248
block-frequency-info: strlen
 - : float = 1.0, int = 8
 - : float = 32.0, int = 256
 - : float = 31.0, int = 248
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: strlen
********** End Constant Hoisting **********
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %12
	discovered a new reachable node %13
MERGING MOSTLY EMPTY BLOCKS - BEFORE:

; <label>:12:                                     ; preds = %4
  br label %4

; <label>:4:                                      ; preds = %12, %1
  %5 = load i8*, i8** %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* %3, align 4
  %8 = getelementptr inbounds i8, i8* %5, i32 %6
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %13
AFTER:

; <label>:4:                                      ; preds = %4, %1
  %5 = load i8*, i8** %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* %3, align 4
  %8 = getelementptr inbounds i8, i8* %5, i32 %6
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %4, label %12



CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%2]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%5 + 1*%6]
CGP: Found      local addrmode: [Base:%3]
	discovered a new reachable node %2
	discovered a new reachable node %5
	discovered a new reachable node %10
	discovered a new reachable node %16
	discovered a new reachable node %2
	discovered a new reachable node %5
	discovered a new reachable node %10
	discovered a new reachable node %16
	discovered a new reachable node %2
	discovered a new reachable node %5
	discovered a new reachable node %10
	discovered a new reachable node %16
---- Branch Probability Info : strcpy ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 0 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge  -> 1 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for 

block-frequency: strcpy
=======================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
 - 3: 
loop-detection
 - loop = 
 - loop = : member = 
compute-mass-in-loop: *
 - node: 
  => [ local  ] weight = 2080374784, succ = 
  => [  exit  ] weight = 67108864, succ = 
  => mass:  ffffffffffffffff
  => assign 07ffffffffffffff (f800000000000000) [exit] to 
  => assign f800000000000000 (0000000000000000) to 
 - node: 
  => [backedge] weight = 2147483648
  => mass:  f800000000000000
  => assign f800000000000000 (0000000000000000) [back] to 
compute-loop-scale: *
 - exit-mass = 07ffffffffffffff (ffffffffffffffff - f800000000000000)
 - scale = 32.0
packaging-loop: *
 - node: 
 - node: 
compute-mass-in-function
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to 
 - node: 
  => [ local  ] weight = 576460752303423487, succ = 
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
unwrap-loop-package: *: mass = ffffffffffffffff, scale = 32.0
  => combined-scale = 32.0
 - : 1.0 => 32.0
 - : 0.96875 => 31.0
float-to-int: min = 1.0, max = 32.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
 - : float = 32.0, scaled = 256.0, int = 256
 - : float = 1.0, scaled = 8.0, int = 8
 - : float = 31.0, scaled = 248.0, int = 248
block-frequency-info: strcpy
 - : float = 1.0, int = 8
 - : float = 32.0, int = 256
 - : float = 31.0, int = 248
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: strcpy
********** End Constant Hoisting **********
	discovered a new reachable node %2
	discovered a new reachable node %5
	discovered a new reachable node %10
	discovered a new reachable node %16
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%11]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%14]
CGP: Found      local addrmode: [Base:%3]
CGP: Found      local addrmode: [Base:%17]
	discovered a new reachable node %3
	discovered a new reachable node %8
	discovered a new reachable node %12
	discovered a new reachable node %17
	discovered a new reachable node %19
	discovered a new reachable node %23
	discovered a new reachable node %30
	discovered a new reachable node %3
	discovered a new reachable node %8
	discovered a new reachable node %12
	discovered a new reachable node %17
	discovered a new reachable node %19
	discovered a new reachable node %23
	discovered a new reachable node %30
	discovered a new reachable node %3
	discovered a new reachable node %8
	discovered a new reachable node %12
	discovered a new reachable node %17
	discovered a new reachable node %19
	discovered a new reachable node %23
	discovered a new reachable node %30
---- Branch Probability Info : strncpy ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 0 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge  -> 1 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 

block-frequency: strncpy
========================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
 - 3: 
 - 4: 
 - 5: 
 - 6: 
loop-detection
 - loop = 
 - loop = : member = 
 - loop = : member = 
 - loop = : member = 
 - loop = : member = 
compute-mass-in-loop: *
 - node: 
  => [ local  ] weight = 1073741824, succ = 
  => [ local  ] weight = 1073741824, succ = 
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to 
  => assign 8000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2080374784, succ = 
  => [  exit  ] weight = 67108864, succ = 
  => mass:  ffffffffffffffff
  => assign 07ffffffffffffff (f800000000000000) [exit] to 
  => assign f800000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  f800000000000000
  => assign f800000000000000 (0000000000000000) to 
 - node: 
  => [backedge] weight = 2147483648
  => mass:  f800000000000000
  => assign f800000000000000 (0000000000000000) [back] to 
compute-loop-scale: *
 - exit-mass = 07ffffffffffffff (ffffffffffffffff - f800000000000000)
 - scale = 32.0
packaging-loop: *
 - node: 
 - node: 
 - node: 
 - node: 
 - node: 
compute-mass-in-function
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to 
 - node: 
  => [ local  ] weight = 576460752303423487, succ = 
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
unwrap-loop-package: *: mass = ffffffffffffffff, scale = 32.0
  => combined-scale = 32.0
 - : 1.0 => 32.0
 - : 0.5 => 16.0
 - : 1.0 => 32.0
 - : 0.96875 => 31.0
 - : 0.96875 => 31.0
float-to-int: min = 1.0, max = 32.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
 - : float = 32.0, scaled = 256.0, int = 256
 - : float = 16.0, scaled = 128.0, int = 128
 - : float = 32.0, scaled = 256.0, int = 256
 - : float = 1.0, scaled = 8.0, int = 8
 - : float = 31.0, scaled = 248.0, int = 248
 - : float = 31.0, scaled = 248.0, int = 248
block-frequency-info: strncpy
 - : float = 1.0, int = 8
 - : float = 32.0, int = 256
 - : float = 16.0, int = 128
 - : float = 32.0, int = 256
 - : float = 31.0, int = 248
 - : float = 31.0, int = 248
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: strncpy
********** End Constant Hoisting **********
	discovered a new reachable node %3
	discovered a new reachable node %8
	discovered a new reachable node %12
	discovered a new reachable node %17
	discovered a new reachable node %19
	discovered a new reachable node %23
	discovered a new reachable node %30
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [Base:%7]
CGP: Found      local addrmode: [Base:%7]
CGP: Found      local addrmode: [Base:%6]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%13]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%20]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%22]
CGP: Found      local addrmode: [Base:%7]
CGP: Found      local addrmode: [Base:%7]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%5]
CGP: Found      local addrmode: [Base:%4]
CGP: Found      local addrmode: [Base:%4]
[SafeStack] Function: strlen
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %12
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %12
---- Branch Probability Info : strlen ----

Computing probabilities for 
Computing probabilities for 
set edge  -> 0 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge  -> 1 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for 



=== strlen
Found argument copy elision candidate:   %2 = alloca i8*, align 4
Initial selection DAG: BB#0 'strlen:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0
    t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32
  t8: ch = store<ST4[%3]> t6, Constant:i32<0>, FrameIndex:i32<1>, undef:i32



Combining: t8: ch = store<ST4[%3]> t6, Constant:i32<0>, FrameIndex:i32<1>, undef:i32

Replacing.1 t8: ch = store<ST4[%3]> t6, Constant:i32<0>, FrameIndex:i32<1>, undef:i32

With: t10: ch = TokenFactor t6, t9
 and 0 other values

Combining: t10: ch = TokenFactor t6, t9

Combining: t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32

Combining: t7: i32 = FrameIndex<1>

Combining: t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32

Combining: t5: i32 = undef

Combining: t4: i32 = Constant<0>

Combining: t3: i32 = FrameIndex<0>

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Combining: t1: i32 = Register %vreg0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#0 'strlen:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0
    t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32
    t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32
  t10: ch = TokenFactor t6, t9


Legally typed node: t7: i32 = FrameIndex<1>

Legally typed node: t5: i32 = undef

Legally typed node: t4: i32 = Constant<0>

Legally typed node: t3: i32 = FrameIndex<0>

Legally typed node: t1: i32 = Register %vreg0

Legally typed node: t0: ch = EntryToken

Legally typed node: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Legally typed node: t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32

Legally typed node: t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32

Legally typed node: t10: ch = TokenFactor t6, t9

Legally typed node: t65535: ch = handlenode t10

Type-legalized selection DAG: BB#0 'strlen:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0
    t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32
    t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32
  t10: ch = TokenFactor t6, t9



Legalizing: t10: ch = TokenFactor t6, t9

Legalizing: t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32

Legalizing: t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Legalizing: t7: i32 = FrameIndex<1>

Legalizing: t5: i32 = undef

Legalizing: t4: i32 = Constant<0>

Legalizing: t3: i32 = FrameIndex<0>

Legalizing: t1: i32 = Register %vreg0

Legalizing: t0: ch = EntryToken
Legalized selection DAG: BB#0 'strlen:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0
    t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32
    t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32
  t10: ch = TokenFactor t6, t9



Legalizing: t10: ch = TokenFactor t6, t9

Combining: t10: ch = TokenFactor t6, t9

Legalizing: t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32

Combining: t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32

Legalizing: t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32

Combining: t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Legalizing: t7: i32 = FrameIndex<1>

Combining: t7: i32 = FrameIndex<1>

Legalizing: t5: i32 = undef

Combining: t5: i32 = undef

Legalizing: t4: i32 = Constant<0>

Combining: t4: i32 = Constant<0>

Legalizing: t3: i32 = FrameIndex<0>

Combining: t3: i32 = FrameIndex<0>

Legalizing: t1: i32 = Register %vreg0

Combining: t1: i32 = Register %vreg0

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#0 'strlen:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0
    t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32
    t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32
  t10: ch = TokenFactor t6, t9


===== Instruction selection begins: BB#0 ''
Selecting: t10: ch = TokenFactor t6, t9

Selecting: t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32

ISEL: Starting pattern match on root node: t6: ch = store<ST4[%2]> t0, t2, FrameIndex:i32<0>, undef:i32

  Match failed at index 9
  Continuing at 64
  Skipped scope entry (due to false predicate) at index 73, continuing at 107
  Morphed node: t6: ch = STORE_ri<Mem:ST4[%2]> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t2, t0

ISEL: Match complete!
Selecting: t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32

ISEL: Starting pattern match on root node: t9: ch = store<ST4[%3]> t0, Constant:i32<0>, FrameIndex:i32<1>, undef:i32

  Initial Opcode index to 4
  Match failed at index 9
  Continuing at 64
  Skipped scope entry (due to false predicate) at index 73, continuing at 107
  Morphed node: t9: ch = STORE_ri<Mem:ST4[%3]> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, Constant:i32<0>, t0

ISEL: Match complete!
Selecting: t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Selecting: t4: i32 = Constant<0>

ISEL: Starting pattern match on root node: t4: i32 = Constant<0>

  Initial Opcode index to 958
  Morphed node: t4: i32 = MOVE_ri TargetConstant:i32<0>

ISEL: Match complete!
Selecting: t1: i32 = Register %vreg0

Selecting: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: BB#0 'strlen:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
      t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0
    t6: ch = STORE_ri<Mem:ST4[%2]> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t2, t0
      t4: i32 = MOVE_ri TargetConstant:i32<0>
    t9: ch = STORE_ri<Mem:ST4[%3]> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t4, t0
  t10: ch = TokenFactor t6, t9


********** List Scheduling BB#0 '' **********
SU(0): t10: ch = TokenFactor t6, t9

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Barrier
    SU(1): Ord  Latency=1 Barrier
SU(1): t9: ch = STORE_ri<Mem:ST4[%3]> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t4, t0

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t4: i32 = MOVE_ri TargetConstant:i32<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1
SU(3): t6: ch = STORE_ri<Mem:ST4[%2]> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t2, t0

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(4): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1

Examining Available:
Height 0: SU(0): t10: ch = TokenFactor t6, t9


*** Scheduling [0]: SU(0): t10: ch = TokenFactor t6, t9


Examining Available:
Height 1: SU(3): t6: ch = STORE_ri<Mem:ST4[%2]> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t2, t0

Height 1: SU(1): t9: ch = STORE_ri<Mem:ST4[%3]> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t4, t0


*** Scheduling [1]: SU(3): t6: ch = STORE_ri<Mem:ST4[%2]> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t2, t0

GPR: 1 / 0

Examining Available:
RegPressureDiff SU(1): 1 != SU(4): 0
Height 2: SU(4): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0

Height 1: SU(1): t9: ch = STORE_ri<Mem:ST4[%3]> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t4, t0

RegPressureDiff SU(1): 1 != SU(4): 0

*** Scheduling [2]: SU(4): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0


Examining Available:
Height 1: SU(1): t9: ch = STORE_ri<Mem:ST4[%3]> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t4, t0


*** Scheduling [3]: SU(1): t9: ch = STORE_ri<Mem:ST4[%3]> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t4, t0

GPR: 1 / 0

Examining Available:
Height 4: SU(2): t4: i32 = MOVE_ri TargetConstant:i32<0>


*** Scheduling [4]: SU(2): t4: i32 = MOVE_ri TargetConstant:i32<0>

*** Final schedule ***
SU(2): t4: i32 = MOVE_ri TargetConstant:i32<0>

SU(1): t9: ch = STORE_ri<Mem:ST4[%3]> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, t4, t0

SU(4): t2: i32,ch = CopyFromReg t0, Register:i32 %vreg0

SU(3): t6: ch = STORE_ri<Mem:ST4[%2]> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, t2, t0

SU(0): t10: ch = TokenFactor t6, t9


Total amount of phi nodes to update: 0
Initial selection DAG: BB#1 'strlen:'
SelectionDAG has 20 nodes:
  t0: ch = EntryToken
  t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32
  t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32
    t9: ch = TokenFactor t4:1, t6:1
    t8: i32 = add t6, Constant:i32<1>
  t10: ch = store<ST4[%3]> t9, t8, FrameIndex:i32<1>, undef:i32
            t11: i32 = add t4, t6
          t12: i8,ch = load<LD1[%8]> t10, t11, undef:i32
        t13: i32 = sign_extend t12
      t15: i1 = setcc t13, Constant:i32<0>, setne:ch
    t17: ch = brcond t10, t15, BasicBlock:ch< 0x3ca6e48>
  t19: ch = br t17, BasicBlock:ch< 0x3ca6ef8>



Combining: t19: ch = br t17, BasicBlock:ch< 0x3ca6ef8>

Combining: t18: ch = BasicBlock< 0x3ca6ef8>

Combining: t17: ch = brcond t10, t15, BasicBlock:ch< 0x3ca6e48>
 ... into: t20: ch = br_cc t10, setne:ch, t13, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>

Combining: t19: ch = br t20, BasicBlock:ch< 0x3ca6ef8>

Combining: t20: ch = br_cc t10, setne:ch, t13, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>

Combining: t16: ch = BasicBlock< 0x3ca6e48>

Combining: t14: ch = setne

Combining: t13: i32 = sign_extend t12

Replacing.1 t13: i32 = sign_extend t12

With: t21: i32,ch = load<LD1[%8], sext from i8> t10, t11, undef:i32
 and 0 other values

Combining: t20: ch = br_cc t10, setne:ch, t21, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>

Combining: t21: i32,ch = load<LD1[%8], sext from i8> t10, t11, undef:i32

Combining: t11: i32 = add t4, t6

Combining: t10: ch = store<ST4[%3]> t9, t8, FrameIndex:i32<1>, undef:i32

Replacing.1 t10: ch = store<ST4[%3]> t9, t8, FrameIndex:i32<1>, undef:i32

With: t24: ch = TokenFactor t9, t23
 and 0 other values

Combining: t24: ch = TokenFactor t9, t23
 ... into: t25: ch = TokenFactor t23, t4:1

Combining: t20: ch = br_cc t25, setne:ch, t21, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>

Combining: t21: i32,ch = load<LD1[%8], sext from i8> t25, t11, undef:i32

Replacing.1 t21: i32,ch = load<LD1[%8], sext from i8> t25, t11, undef:i32

With: t26: i32,ch = load<LD1[%8], sext from i8> t23, t11, undef:i32
 and 1 other values

Combining: t20: ch = br_cc t25, setne:ch, t26, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>

Combining: t26: i32,ch = load<LD1[%8], sext from i8> t23, t11, undef:i32

Combining: t25: ch = TokenFactor t23, t4:1

Combining: t23: ch = store<ST4[%3]> t6:1, t8, FrameIndex:i32<1>, undef:i32

Combining: t8: i32 = add t6, Constant:i32<1>

Combining: t7: i32 = Constant<1>

Combining: t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32

Combining: t5: i32 = FrameIndex<1>

Combining: t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32

Combining: t3: i32 = undef

Combining: t2: i32 = Constant<0>

Combining: t1: i32 = FrameIndex<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: BB#1 'strlen:'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32
  t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32
    t8: i32 = add t6, Constant:i32<1>
  t23: ch = store<ST4[%3]> t6:1, t8, FrameIndex:i32<1>, undef:i32
      t25: ch = TokenFactor t23, t4:1
        t11: i32 = add t4, t6
      t26: i32,ch = load<LD1[%8], sext from i8> t23, t11, undef:i32
    t20: ch = br_cc t25, setne:ch, t26, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>
  t19: ch = br t20, BasicBlock:ch< 0x3ca6ef8>


Legally typed node: t18: ch = BasicBlock< 0x3ca6ef8>

Legally typed node: t16: ch = BasicBlock< 0x3ca6e48>

Legally typed node: t14: ch = setne

Legally typed node: t7: i32 = Constant<1>

Legally typed node: t5: i32 = FrameIndex<1>

Legally typed node: t3: i32 = undef

Legally typed node: t2: i32 = Constant<0>

Legally typed node: t1: i32 = FrameIndex<0>

Legally typed node: t0: ch = EntryToken

Legally typed node: t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32

Legally typed node: t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32

Legally typed node: t8: i32 = add t6, Constant:i32<1>

Legally typed node: t23: ch = store<ST4[%3]> t6:1, t8, FrameIndex:i32<1>, undef:i32

Legally typed node: t25: ch = TokenFactor t23, t4:1

Legally typed node: t11: i32 = add t4, t6

Legally typed node: t26: i32,ch = load<LD1[%8], sext from i8> t23, t11, undef:i32

Legally typed node: t20: ch = br_cc t25, setne:ch, t26, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>

Legally typed node: t19: ch = br t20, BasicBlock:ch< 0x3ca6ef8>

Legally typed node: t65535: ch = handlenode t19

Type-legalized selection DAG: BB#1 'strlen:'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32
  t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32
    t8: i32 = add t6, Constant:i32<1>
  t23: ch = store<ST4[%3]> t6:1, t8, FrameIndex:i32<1>, undef:i32
      t25: ch = TokenFactor t23, t4:1
        t11: i32 = add t4, t6
      t26: i32,ch = load<LD1[%8], sext from i8> t23, t11, undef:i32
    t20: ch = br_cc t25, setne:ch, t26, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>
  t19: ch = br t20, BasicBlock:ch< 0x3ca6ef8>



Legalizing: t19: ch = br t20, BasicBlock:ch< 0x3ca6ef8>

Legalizing: t20: ch = br_cc t25, setne:ch, t26, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>
 ... replacing: t20: ch = br_cc t25, setne:ch, t26, Constant:i32<0>, BasicBlock:ch< 0x3ca6e48>
     with:      t30: ch = FRISCISD::BR_CC t25, BasicBlock:ch< 0x3ca6e48>, Constant:i32<8>, t29

Legalizing: t25: ch = TokenFactor t23, t4:1

Legalizing: t26: i32,ch = load<LD1[%8], sext from i8> t23, t11, undef:i32

Legalizing: t23: ch = store<ST4[%3]> t6:1, t8, FrameIndex:i32<1>, undef:i32

Legalizing: t8: i32 = add t6, Constant:i32<1>

Legalizing: t11: i32 = add t4, t6

Legalizing: t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32

Legalizing: t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32

Legalizing: t18: ch = BasicBlock< 0x3ca6ef8>

Legalizing: t16: ch = BasicBlock< 0x3ca6e48>

Legalizing: t7: i32 = Constant<1>

Legalizing: t5: i32 = FrameIndex<1>

Legalizing: t3: i32 = undef

Legalizing: t2: i32 = Constant<0>

Legalizing: t1: i32 = FrameIndex<0>

Legalizing: t0: ch = EntryToken

Legalizing: t33: i32 = sign_extend_inreg t31, ValueType:ch:i8
 ... replacing: t33: i32 = sign_extend_inreg t31, ValueType:ch:i8
     with:      t36: i32 = sra t35, Constant:i32<24>

Legalizing: t31: i32,ch = load<LD1[%8], anyext from i8> t23, t11, undef:i32

Legalizing: t30: ch = FRISCISD::BR_CC t25, BasicBlock:ch< 0x3ca6e48>, Constant:i32<8>, t29

Legalizing: t29: glue = FRISCISD::CMP t36, Constant:i32<0>

Legalizing: t28: i32 = Constant<8>

Legalizing: t36: i32 = sra t35, Constant:i32<24>

Legalizing: t35: i32 = shl t31, Constant:i32<24>

Legalizing: t34: i32 = Constant<24>
Legalized selection DAG: BB#1 'strlen:'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
  t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32
  t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32
    t8: i32 = add t6, Constant:i32<1>
  t23: ch = store<ST4[%3]> t6:1, t8, FrameIndex:i32<1>, undef:i32
      t25: ch = TokenFactor t23, t4:1
              t11: i32 = add t4, t6
            t31: i32,ch = load<LD1[%8], anyext from i8> t23, t11, undef:i32
          t35: i32 = shl t31, Constant:i32<24>
        t36: i32 = sra t35, Constant:i32<24>
      t29: glue = FRISCISD::CMP t36, Constant:i32<0>
    t30: ch = FRISCISD::BR_CC t25, BasicBlock:ch< 0x3ca6e48>, Constant:i32<8>, t29
  t19: ch = br t30, BasicBlock:ch< 0x3ca6ef8>



Legalizing: t36: i32 = sra t35, Constant:i32<24>

Combining: t36: i32 = sra t35, Constant:i32<24>

Legalizing: t35: i32 = shl t31, Constant:i32<24>

Combining: t35: i32 = shl t31, Constant:i32<24>

Legalizing: t34: i32 = Constant<24>

Combining: t34: i32 = Constant<24>

Legalizing: t31: i32,ch = load<LD1[%8], anyext from i8> t23, t11, undef:i32

Combining: t31: i32,ch = load<LD1[%8], anyext from i8> t23, t11, undef:i32

Legalizing: t30: ch = FRISCISD::BR_CC t25, BasicBlock:ch< 0x3ca6e48>, Constant:i32<8>, t29

Combining: t30: ch = FRISCISD::BR_CC t25, BasicBlock:ch< 0x3ca6e48>, Constant:i32<8>, t29

Legalizing: t29: glue = FRISCISD::CMP t36, Constant:i32<0>

Combining: t29: glue = FRISCISD::CMP t36, Constant:i32<0>

Legalizing: t28: i32 = Constant<8>

Combining: t28: i32 = Constant<8>

Legalizing: t19: ch = br t30, BasicBlock:ch< 0x3ca6ef8>

Combining: t19: ch = br t30, BasicBlock:ch< 0x3ca6ef8>

Legalizing: t25: ch = TokenFactor t23, t4:1

Combining: t25: ch = TokenFactor t23, t4:1

Legalizing: t23: ch = store<ST4[%3]> t6:1, t8, FrameIndex:i32<1>, undef:i32

Combining: t23: ch = store<ST4[%3]> t6:1, t8, FrameIndex:i32<1>, undef:i32

Legalizing: t8: i32 = add t6, Constant:i32<1>

Combining: t8: i32 = add t6, Constant:i32<1>

Legalizing: t11: i32 = add t4, t6

Combining: t11: i32 = add t4, t6

Legalizing: t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32

Combining: t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32

Legalizing: t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32

Combining: t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32

Legalizing: t18: ch = BasicBlock< 0x3ca6ef8>

Combining: t18: ch = BasicBlock< 0x3ca6ef8>

Legalizing: t16: ch = BasicBlock< 0x3ca6e48>

Combining: t16: ch = BasicBlock< 0x3ca6e48>

Legalizing: t7: i32 = Constant<1>

Combining: t7: i32 = Constant<1>

Legalizing: t5: i32 = FrameIndex<1>

Combining: t5: i32 = FrameIndex<1>

Legalizing: t3: i32 = undef

Combining: t3: i32 = undef

Legalizing: t2: i32 = Constant<0>

Combining: t2: i32 = Constant<0>

Legalizing: t1: i32 = FrameIndex<0>

Combining: t1: i32 = FrameIndex<0>

Legalizing: t0: ch = EntryToken

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: BB#1 'strlen:'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
  t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32
  t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32
    t8: i32 = add t6, Constant:i32<1>
  t23: ch = store<ST4[%3]> t6:1, t8, FrameIndex:i32<1>, undef:i32
      t25: ch = TokenFactor t23, t4:1
              t11: i32 = add t4, t6
            t31: i32,ch = load<LD1[%8], anyext from i8> t23, t11, undef:i32
          t35: i32 = shl t31, Constant:i32<24>
        t36: i32 = sra t35, Constant:i32<24>
      t29: glue = FRISCISD::CMP t36, Constant:i32<0>
    t30: ch = FRISCISD::BR_CC t25, BasicBlock:ch< 0x3ca6e48>, Constant:i32<8>, t29
  t19: ch = br t30, BasicBlock:ch< 0x3ca6ef8>


===== Instruction selection begins: BB#1 ''
Selecting: t19: ch = br t30, BasicBlock:ch< 0x3ca6ef8>

ISEL: Starting pattern match on root node: t19: ch = br t30, BasicBlock:ch< 0x3ca6ef8>

  Initial Opcode index to 930
  Morphed node: t19: ch = JP_i BasicBlock:ch< 0x3ca6ef8>, t30

ISEL: Match complete!
Selecting: t30: ch = FRISCISD::BR_CC t25, BasicBlock:ch< 0x3ca6e48>, Constant:i32<8>, t29

ISEL: Starting pattern match on root node: t30: ch = FRISCISD::BR_CC t25, BasicBlock:ch< 0x3ca6e48>, Constant:i32<8>, t29

  Initial Opcode index to 728
  Morphed node: t30: ch = JPcc_i BasicBlock:ch< 0x3ca6e48>, TargetConstant:i32<8>, t25, t29

ISEL: Match complete!
Selecting: t29: glue = FRISCISD::CMP t36, Constant:i32<0>

ISEL: Starting pattern match on root node: t29: glue = FRISCISD::CMP t36, Constant:i32<0>

  Initial Opcode index to 861
  Morphed node: t29: i32,glue = CMP_rr t36, Constant:i32<0>

ISEL: Match complete!
Selecting: t36: i32 = sra t35, Constant:i32<24>

ISEL: Starting pattern match on root node: t36: i32 = sra t35, Constant:i32<24>

  Initial Opcode index to 694
  Morphed node: t36: i32,i32 = ASHR_ri t35, TargetConstant:i32<24>

ISEL: Match complete!
Selecting: t35: i32 = shl t31, Constant:i32<24>

ISEL: Starting pattern match on root node: t35: i32 = shl t31, Constant:i32<24>

  Initial Opcode index to 626
  Morphed node: t35: i32,i32 = SHL_ri t31, TargetConstant:i32<24>

ISEL: Match complete!
Selecting: t25: ch = TokenFactor t23, t4:1

Selecting: t31: i32,ch = load<LD1[%8], anyext from i8> t23, t11, undef:i32

ISEL: Starting pattern match on root node: t31: i32,ch = load<LD1[%8], anyext from i8> t23, t11, undef:i32

  Initial Opcode index to 127
  Skipped scope entry (due to false predicate) at index 136, continuing at 170
  Skipped scope entry (due to false predicate) at index 171, continuing at 185
  Match failed at index 134
LLVM ERROR: Cannot select: t31: i32,ch = load<LD1[%8], anyext from i8> t23, t11, undef:i32
  t11: i32 = add t4, t6
    t4: i32,ch = load<LD4[%2](dereferenceable)> t0, FrameIndex:i32<0>, undef:i32
      t1: i32 = FrameIndex<0>
      t3: i32 = undef
    t6: i32,ch = load<LD4[%3](dereferenceable)> t0, FrameIndex:i32<1>, undef:i32
      t5: i32 = FrameIndex<1>
      t3: i32 = undef
  t3: i32 = undef
In function: strlen
